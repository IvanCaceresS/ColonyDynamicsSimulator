1.PrefabMaterialCreator.cs{CPAM_Primitive("SCerevisiae",PrimitiveType.Sphere,new Vector3(5,5,5),new Vector3(90,0,0),0,new Color(1,0.84f,0,1)); CPAM_Primitive("EColi",PrimitiveType.Capsule,new Vector3(0.5f,1,0.5f),new Vector3(90,0,0),1,new Color(0.314f,0.784f,0.471f,1)); float length=10f, helixR=0.5f, tubeR=0.1f, turns=3f; int helixSegments=30, tubeSegments=8; CPAM_Helical("Spirochaeta",length, helixR, tubeR, helixSegments, tubeSegments, turns, new Vector3(90,0,0), new Color(0.2f,0.6f,1f,1f));}2.CreatePrefabsOnClick.cs{private void CreateSingleEntity(string prefabName, Entity bakedPrefabEntityToInstantiate, Vector3 spawnWorldPosition, quaternion desiredWorldRotation, float originalPrefabScale) { quaternion originalPrefabRotation = entityManager.GetComponentData<LocalTransform>(bakedPrefabEntityToInstantiate).Rotation; quaternion newCombinedRotation = math.mul(originalPrefabRotation, desiredWorldRotation); Entity newEntity = entityManager.Instantiate(bakedPrefabEntityToInstantiate); entityManager.SetComponentData(newEntity, new LocalTransform { Position = (float3)spawnWorldPosition, Rotation = newCombinedRotation, Scale = originalPrefabScale });  if (prefabName == "EColi") { entityManager.AddComponentData(newEntity, new EColiComponent { TimeReference = 1200f, SeparationThreshold = 0.75f, MaxScale = 1f, GrowthTime = 0f, GrowthDuration = 1200f * 0.75f, TimeSinceLastDivision = 0f, DivisionInterval = 1200f * 0.75f, HasGeneratedChild = false, Parent = Entity.Null, IsInitialCell = true, SeparationSign = 0, TimeReferenceInitialized = false }); if (entityManager.HasComponent<NonUniformScale>(bakedPrefabEntityToInstantiate)) entityManager.SetComponentData(newEntity, new NonUniformScale { Value = new float3(.5f, 1f, .5f) }); else entityManager.AddComponentData(newEntity, new NonUniformScale { Value = new float3(.5f, 1f, .5f) }); } else if (prefabName == "SCerevisiae") { entityManager.AddComponentData(newEntity, new SCerevisiaeComponent { TimeReference = 5400f, SeparationThreshold = 0.65f, MaxScale = 5f, GrowthTime = 0f, GrowthDuration = 5400f * 0.65f, TimeSinceLastDivision = 0f, DivisionInterval = 5400f * 0.65f, Parent = Entity.Null, IsInitialCell = true,TimeReferenceInitialized = false,GrowthDirection = float3.zero }); } else if (prefabName == "Spirochaeta") { entityManager.AddComponentData(newEntity, new SpirochaetaComponent { MaxAxialLength = 10f, CurrentAxialLength = 10f / 2f, GrowthTime = 0f, GrowthDuration = 5400f * 0.8f, TimeSinceLastDivision = 0f, DivisionInterval = 5400f * 0.8f, TimeReference = 5400f, IsInitialCell = true, TimeReferenceInitialized = false }); } AddPhysicsComponents(newEntity, prefabName, originalPrefabScale); }  private void AddPhysicsComponents(Entity e, string prefabName, float scale) { BlobAssetReference<Unity.Physics.Collider> colliderAsset = default; PhysicsMaterial physicsMat = default; physicsMat.Restitution = 0f;  switch (prefabName) { case "EColi": colliderAsset = Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry { Vertex0 = new float3(0, -scale * 0.5f, 0), Vertex1 = new float3(0, scale * 0.5f, 0), Radius = scale * 0.25f }, CollisionFilter.Default, physicsMat); break; case "SCerevisiae": colliderAsset = Unity.Physics.SphereCollider.Create(new SphereGeometry { Center = float3.zero, Radius = scale * 0.1f }, CollisionFilter.Default, physicsMat); break; case "Spirochaeta": const float axialLength = 10f; const float helixRadius = 0.5f; const float tubeRadius = 0.1f; const float turns = 3f; const int colliderSegments = 20; NativeList<CompoundCollider.ColliderBlobInstance> heliColliders = new NativeList<CompoundCollider.ColliderBlobInstance>(colliderSegments, Allocator.Temp); float segmentLength = axialLength / colliderSegments; float angularChangePerUnitY = (axialLength > 0) ? (turns * 2 * Mathf.PI / axialLength) : 0f; float subColliderActualRadius = tubeRadius; for (int i = 0; i < colliderSegments; i++) { float yPos = -axialLength / 2.0f + segmentLength * (i + 0.5f); float helixAngleAtY = yPos * angularChangePerUnitY; float3 sphereCenter = new float3( helixRadius * math.cos(helixAngleAtY), yPos, helixRadius * math.sin(helixAngleAtY) ); BlobAssetReference<Unity.Physics.Collider> sphereBlob = Unity.Physics.SphereCollider.Create( new SphereGeometry { Center = float3.zero, Radius = subColliderActualRadius }, CollisionFilter.Default, physicsMat ); heliColliders.Add(new CompoundCollider.ColliderBlobInstance { Collider = sphereBlob, CompoundFromChild = new RigidTransform(quaternion.identity, sphereCenter) }); }  if (heliColliders.IsCreated && heliColliders.Length > 0) colliderAsset = Unity.Physics.CompoundCollider.Create(heliColliders.AsArray()); else { colliderAsset = Unity.Physics.CapsuleCollider.Create(new CapsuleGeometry{ Vertex0 = new float3(0, -axialLength/2f, 0), Vertex1 = new float3(0, axialLength/2f, 0), Radius = helixRadius + tubeRadius }, CollisionFilter.Default, physicsMat); } if(heliColliders.IsCreated) heliColliders.Dispose(); break; default: Debug.LogWarning($"AddPhysicsComponents: No specific collider defined for {prefabName}. Using default sphere."); colliderAsset = Unity.Physics.SphereCollider.Create(new SphereGeometry { Center = float3.zero, Radius = scale * 0.1f }, CollisionFilter.Default, physicsMat); break; }  if (colliderAsset.IsCreated) { entityManager.AddComponentData(e, new PhysicsCollider { Value = colliderAsset }); var massProperties = colliderAsset.Value.MassProperties; entityManager.AddComponentData(e, PhysicsMass.CreateDynamic(massProperties, 1f)); entityManager.AddComponentData(e, new PhysicsVelocity { Linear = float3.zero, Angular = float3.zero }); entityManager.AddComponentData(e, new PhysicsGravityFactor { Value = 1f }); entityManager.AddComponentData(e, new PhysicsDamping { Linear = 0.05f, Angular = 0.05f }); } else Debug.LogError($"Failed to create physics collider for {prefabName}."); }}3.AnotherComponent.cs{public struct MyDataComponent { public int Value; }}4.DummyComponent.cs{using UnityEngine; public class DummyComponent : MonoBehaviour { // Start is called before the first frame update void Start() { Debug.Log("Dummy Component Started!"); } }}5.EColiComponent.cs{using Unity.Entities; using Unity.Mathematics; public struct EColiComponent:IComponentData { public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold; public bool HasGeneratedChild,IsInitialCell,TimeReferenceInitialized; public Entity Parent; public int SeparationSign; }}6.SCerevisiaeComponent.cs{using Unity.Entities; using Unity.Mathematics; public struct SCerevisiaeComponent:IComponentData { public float TimeReference,MaxScale,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,SeparationThreshold; public bool IsInitialCell,TimeReferenceInitialized; public Entity Parent; public float3 GrowthDirection; }}7.SpirochaetaComponent.cs{using Unity.Entities; using Unity.Mathematics; public struct SpirochaetaComponent:IComponentData { public float CurrentAxialLength,MaxAxialLength,GrowthTime,GrowthDuration,TimeSinceLastDivision,DivisionInterval,TimeReference,ForwardSpeed; public bool IsInitialCell,TimeReferenceInitialized; public Entity Parent; public int SeparationSign; public Unity.Mathematics.Random RandomState; }}